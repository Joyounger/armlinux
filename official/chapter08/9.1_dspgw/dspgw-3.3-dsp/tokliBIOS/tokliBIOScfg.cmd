/*   Do *not* directly modify this file.  It was    */
/*   generated by the Configuration Tool; any  */
/*   changes risk being overwritten.                */

/* INPUT tokliBIOS.cdb */

/* MODULE PARAMETERS */
GBL_USERINITFXN = _FXN_F_nop;
GBL_BIOS_BOOTFXN = _FXN_F_nop;

MEM_SEGZERO = DARAM;
MEM_MALLOCSEG = DARAM;

CLK_TIMEFXN = _CLK_getltime;
CLK_HOOKFXN = _CLK_run;

PRD_THOOKFXN = KNL_tick_stub;

RTDX_DATAMEMSEG = DARAM;

HST_DSMBUFSEG = DARAM;

SWI_EHOOKFXN = GBL_NULL;
SWI_IHOOKFXN = GBL_NULL;
SWI_EXECFXN = SWI_F_exec;
SWI_RUNFXN = SWI_F_run;

TSK_STACKSEG = DARAM;
TSK_VCREATEFXN = _FXN_F_nop;
TSK_VDELETEFXN = _FXN_F_nop;
TSK_VEXITFXN = _FXN_F_nop;
TSK_SWITCHFXN = _tok_TSK_switch;
TSK_READYFXN = _tok_TSK_ready;

IDL_CALIBRFXN = GBL_NULL;

SYS_ABORTFXN = _UTL_doAbort;
SYS_ERRORFXN = _UTL_doError;
SYS_EXITFXN = _UTL_halt;
SYS_PUTCFXN = _UTL_doPutc;

GIO_CREATEFXN = _FXN_F_nop;
GIO_DELETEFXN = _FXN_F_nop;
GIO_PENDFXN = _FXN_F_nop;
GIO_POSTFXN = _FXN_F_nop;

PWRM_PWRM_BOOTHOOKFXN = _FXN_F_nop;

/* OBJECT ALIASES */
_SARAM = SARAM;
_VECT = VECT;
_DARAM = DARAM;
_PRD_clock = PRD_clock;
_PRD0 = PRD0;
_PRD1 = PRD1;
_HWI_RESET = HWI_RESET;
_HWI_NMI = HWI_NMI;
_HWI_INT2 = HWI_INT2;
_HWI_INT3 = HWI_INT3;
_HWI_INT4 = HWI_INT4;
_HWI_INT5 = HWI_INT5;
_HWI_INT6 = HWI_INT6;
_HWI_INT7 = HWI_INT7;
_HWI_INT8 = HWI_INT8;
_HWI_INT9 = HWI_INT9;
_HWI_INT10 = HWI_INT10;
_HWI_INT11 = HWI_INT11;
_HWI_INT12 = HWI_INT12;
_HWI_INT13 = HWI_INT13;
_HWI_INT14 = HWI_INT14;
_HWI_INT15 = HWI_INT15;
_HWI_INT16 = HWI_INT16;
_HWI_INT17 = HWI_INT17;
_HWI_INT18 = HWI_INT18;
_HWI_INT19 = HWI_INT19;
_HWI_INT20 = HWI_INT20;
_HWI_INT21 = HWI_INT21;
_HWI_INT22 = HWI_INT22;
_HWI_INT23 = HWI_INT23;
_HWI_BERR = HWI_BERR;
_HWI_DLOG = HWI_DLOG;
_HWI_RTOS = HWI_RTOS;
_HWI_SINT27 = HWI_SINT27;
_HWI_SINT28 = HWI_SINT28;
_HWI_SINT29 = HWI_SINT29;
_HWI_SINT30 = HWI_SINT30;
_HWI_SINT31 = HWI_SINT31;
_KNL_swi = KNL_swi;
_PRD_swi = PRD_swi;
_TSK_idle = TSK_idle;
_TSK_sleep = TSK_sleep;
_TSK_super = TSK_super;
_LOG_system = LOG_system;
_SEM_super = SEM_super;
_SEM_ipbuf_sys_da = SEM_ipbuf_sys_da;
_SEM_fb = SEM_fb;

/* MODULE GBL */

SECTIONS {
   .vers block(0x20000) (COPY): {} /* version information */
}

-priority
-llnknone.a55L
-ldrivers.a55L         /* device drivers support */
-lsioboth.a55L         /* supports both SIO models */
-lbios1510.a55L	/* 1510,1610,5910,5912,5905 and compatible chips */
-lbios.a55L            /* DSP/BIOS support */
-lrtdxx.lib            /* RTDX JTAG support */
-lrts55x.lib           /* C and C++ run-time library support */




/* MODULE MEM */
-stack 0x800
-sysstack 0x200

SECTIONS { .sysstack : block(0x20000) fill = 0xfeeb {
           GBL_sysstackbeg = .;
           *(.sysstack)
           GBL_sysstackend = GBL_sysstackbeg + 0x200 -1 ;
            _HWI_SYSSTKTOP = GBL_sysstackbeg; 
            _HWI_SYSSTKBOTTOM =
(GBL_sysstackend+1);
       } > DARAM PAGE 0}

MEMORY {
   PAGE 0:     SARAM:    origin = 0x10000, len = 0x18000
   PAGE 0:     VECT:     origin = 0xffff00, len = 0x100
   PAGE 0:     DARAM:    origin = 0x100, len = 0xff00
}
/* MODULE CLK */
SECTIONS {
   .clk: block(0x20000){
        CLK_F_gethtime = _CLK_getshtime;
        CLK_A_TABBEG = .;
        *(.clk)
        CLK_A_TABEND = .;
        CLK_A_TABLEN = (. - CLK_A_TABBEG) / 4;
   } > DARAM PAGE 0 
}
_CLK_PRD = CLK_PRD;
_CLK_COUNTSPMS = CLK_COUNTSPMS;
_CLK_REGS = CLK_REGS;
_CLK_USETIMER = CLK_USETIMER;
_CLK_TIMERNUM = CLK_TIMERNUM;
_CLK_TCR = CLK_TCR;
_CLK_TDDR = CLK_TDDR;

/* MODULE PRD */
SECTIONS {
   .prd: block(0x20000){
        PRD_A_TABBEG = .;
        *(.prd)
        PRD_A_TABEND = .;
        PRD_A_TABLEN = (. - PRD_A_TABBEG) / 24;
   } > DARAM PAGE 0
}

/* MODULE HWI */
HWI_TINT = HWI_INT23;
_HWI_TINT = HWI_TINT;
/* MODULE SWI */
SECTIONS {
   .swi: block(0x20000){
        SWI_A_TABBEG = .;
        *(.swi)
        SWI_A_TABEND = .;
        SWI_A_TABLEN = (. - SWI_A_TABBEG) / 40;
   } > DARAM PAGE 0
}

/* MODULE TSK */
SECTIONS {
   .tsk: block(0x20000){
        TSK_A_TABBEG = .;
        *(.tsk)
        TSK_A_TABEND = .;
        TSK_A_TABLEN = (. - TSK_A_TABBEG) / 88;
   } > DARAM PAGE 0
}

/* MODULE IDL */
SECTIONS {
   .idl: block(0x20000){
        IDL_A_TABBEG = .;
        *(.idl)
        IDL_A_TABEND = .;
        IDL_A_TABLEN = (. - IDL_A_TABBEG) / 4;
        IDL_A_CALBEG = .;
        *(.idlcal)
        IDL_A_CALEND = .;
        IDL_A_CALLEN = (. - IDL_A_CALBEG) / 4;
   } > DARAM PAGE 0
}



SECTIONS {
        .hwi_disp_sec:     {} > DARAM PAGE 0

        .bss: block(0x20000)    {} > DARAM PAGE 0

        .far:     {} > DARAM PAGE 0

        .sysdata: block(0x20000) {} > DARAM PAGE 0

        .mem: 	  {} > DARAM PAGE 0

        .cio:     {} > DARAM PAGE 0

        .sysregs: {} > DARAM PAGE 0

        .sem: block(0x20000){} > DARAM PAGE 0

        .dsm: block(0x20000) {} > DARAM PAGE 0

        .data: block(0x20000)  {} > DARAM PAGE 0

        .gio: block(0x20000)    {} > DARAM PAGE 0

        .sys: block(0x20000)    {} > DARAM PAGE 0

        .TSK_idle$stk: block(0x20000){
            *(.TSK_idle$stk)
        } > DARAM PAGE 0

        .TSK_sleep$stk: block(0x20000){
            *(.TSK_sleep$stk)
        } > DARAM PAGE 0

        .TSK_super$stk: block(0x20000){
            *(.TSK_super$stk)
        } > DARAM PAGE 0

        GROUP {
         .const: {} 
         .printf (COPY): {} 
        } > DARAM PAGE 0

        .args: align = 0x4  fill=0 block(0x20000) {
            *(.args)
            . += 0x10;
        } > DARAM PAGE 0

        /* LOG_system buffer */
        .LOG_system$buf: block(0x20000) align = 0x80 fill = 0xffff {} > DARAM PAGE 0

        .trace: block(0x20000) fill = 0x0 {
           _SYS_PUTCBEG = .;
           . += 0x400;
           _SYS_PUTCEND = . - 1;
        } > DARAM PAGE 0

        .stack: block(0x20000) fill=0xbeef {
            GBL_stackbeg = .;
            *(.stack)
            GBL_stackend = (GBL_stackbeg + 0x800 - 1) ;
            _HWI_STKBOTTOM = (GBL_stackend+1);
            _HWI_STKTOP = (GBL_stackbeg);
        } > DARAM PAGE 0

        .hst: {
             HST_A_TABBEG = .;
            _HST_A_TABBEG = .;
            /* no HST objects */
            HST_A_TABEND = .;
            _HST_A_TABEND = .;
             HST_A_TABLEN = (. - _HST_A_TABBEG) / 16;
            _HST_A_TABLEN = (. - _HST_A_TABBEG) / 16;
        } > DARAM PAGE 0

        .log: {
             LOG_A_TABBEG = .;
            _LOG_A_TABBEG = .;
            *(.log)
            LOG_A_TABEND = .;
            _LOG_A_TABEND = .;
             LOG_A_TABLEN = (. - _LOG_A_TABBEG) / 20;
            _LOG_A_TABLEN = (. - _LOG_A_TABBEG) / 20;
        } > DARAM PAGE 0

        .pip: {
             PIP_A_TABBEG = .;
            _PIP_A_TABBEG = .;
            /* no PIP objects */
            PIP_A_TABEND = .;
            _PIP_A_TABEND = .;
             PIP_A_TABLEN = (. - _PIP_A_TABBEG) / 100;
            _PIP_A_TABLEN = (. - _PIP_A_TABBEG) / 100;
        } > DARAM PAGE 0

        .sts: {
             STS_A_TABBEG = .;
            _STS_A_TABBEG = .;
            /* no STS objects */
            STS_A_TABEND = .;
            _STS_A_TABEND = .;
             STS_A_TABLEN = (. - _STS_A_TABBEG) / 16;
            _STS_A_TABLEN = (. - _STS_A_TABBEG) / 16;
        } > DARAM PAGE 0

        .DARAM$heap: {
            DARAM$B = .;
            _DARAM_base = .;
            DARAM$L = 0x7f00;
            _DARAM_length = 0x7f00;
            . += 0x7f00;
        } > DARAM PAGE 0

        frt:    {} > SARAM PAGE 0

        .bios:    {} > SARAM PAGE 0

        .text:    {} > SARAM PAGE 0

        .switch:    {} > SARAM PAGE 0

        .sysinit:    {} > SARAM PAGE 0

        .trcdata:    {} > SARAM PAGE 0

        .cinit: block(0x20000)    {} > SARAM PAGE 0

        .pinit: block(0x20000)    {} > SARAM PAGE 0

        .gblinit: block(0x20000)   {} > SARAM PAGE 0

        .hwi:  {
       /* no HWI stubs are necessary */
       }  > SARAM PAGE 0

        .SARAM$heap: {
            SARAM$B = .;
            _SARAM_base = .;
            SARAM$L = 0x10;
            _SARAM_length = 0x10;
            . += 0x10;
        } > SARAM PAGE 0

        .hwi_vec:  align = 0x100{
            HWI_A_VECS = .;
           _HWI_A_VECS = . ; 
           *(.hwi_vec)
        } > VECT PAGE 0

}

