/****************************************************************************
** khtml::CachedImage meta object code from reading C++ file 'loader.h'
**
** Created: Thu Nov 20 06:16:50 2008
**      by: The Qt MOC ($Id: qt/src/moc/moc.y   2.3.10   edited 2005-01-24 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#if !defined(Q_MOC_OUTPUT_REVISION)
#define Q_MOC_OUTPUT_REVISION 9
#elif Q_MOC_OUTPUT_REVISION != 9
#error "Moc format conflict - please regenerate all moc files"
#endif

#include "loader.h"
#include <qmetaobject.h>
#include <qapplication.h>
#ifdef QWS
#include <qobjectdict.h>
#endif



const char *khtml::CachedImage::className() const
{
    return "khtml::CachedImage";
}

QMetaObject *khtml::CachedImage::metaObj = 0;

#ifdef QWS
static class khtml__CachedImage_metaObj_Unloader {
public:
    ~khtml__CachedImage_metaObj_Unloader()
    {
         if ( objectDict )
             objectDict->remove( "khtml::CachedImage" );
    }
} khtml__CachedImage_metaObj_unloader;
#endif

void khtml::CachedImage::initMetaObject()
{
    if ( metaObj )
	return;
    if ( qstrcmp(QObject::className(), "QObject") != 0 )
	badSuperclassWarning("khtml::CachedImage","QObject");
    (void) staticMetaObject();
}

#ifndef QT_NO_TRANSLATION

QString khtml::CachedImage::tr(const char* s)
{
    return qApp->translate( "khtml::CachedImage", s, 0 );
}

QString khtml::CachedImage::tr(const char* s, const char * c)
{
    return qApp->translate( "khtml::CachedImage", s, c );
}

#endif // QT_NO_TRANSLATION

QMetaObject* khtml::CachedImage::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    (void) QObject::staticMetaObject();
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    typedef void (khtml::CachedImage::*m1_t0)(const QRect&);
    typedef void (QObject::*om1_t0)(const QRect&);
    typedef void (khtml::CachedImage::*m1_t1)(int);
    typedef void (QObject::*om1_t1)(int);
    typedef void (khtml::CachedImage::*m1_t2)(const QSize&);
    typedef void (QObject::*om1_t2)(const QSize&);
    m1_t0 v1_0 = &khtml::CachedImage::movieUpdated;
    om1_t0 ov1_0 = (om1_t0)v1_0;
    m1_t1 v1_1 = &khtml::CachedImage::movieStatus;
    om1_t1 ov1_1 = (om1_t1)v1_1;
    m1_t2 v1_2 = &khtml::CachedImage::movieResize;
    om1_t2 ov1_2 = (om1_t2)v1_2;
    QMetaData *slot_tbl = QMetaObject::new_metadata(3);
    QMetaData::Access *slot_tbl_access = QMetaObject::new_metaaccess(3);
    slot_tbl[0].name = "movieUpdated(const QRect&)";
    slot_tbl[0].ptr = (QMember)ov1_0;
    slot_tbl_access[0] = QMetaData::Private;
    slot_tbl[1].name = "movieStatus(int)";
    slot_tbl[1].ptr = (QMember)ov1_1;
    slot_tbl_access[1] = QMetaData::Private;
    slot_tbl[2].name = "movieResize(const QSize&)";
    slot_tbl[2].ptr = (QMember)ov1_2;
    slot_tbl_access[2] = QMetaData::Private;
    metaObj = QMetaObject::new_metaobject(
	"khtml::CachedImage", "QObject",
	slot_tbl, 3,
	0, 0,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    metaObj->set_slot_access( slot_tbl_access );
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    return metaObj;
}


const char *khtml::Loader::className() const
{
    return "khtml::Loader";
}

QMetaObject *khtml::Loader::metaObj = 0;

#ifdef QWS
static class khtml__Loader_metaObj_Unloader {
public:
    ~khtml__Loader_metaObj_Unloader()
    {
         if ( objectDict )
             objectDict->remove( "khtml::Loader" );
    }
} khtml__Loader_metaObj_unloader;
#endif

void khtml::Loader::initMetaObject()
{
    if ( metaObj )
	return;
    if ( qstrcmp(QObject::className(), "QObject") != 0 )
	badSuperclassWarning("khtml::Loader","QObject");
    (void) staticMetaObject();
}

#ifndef QT_NO_TRANSLATION

QString khtml::Loader::tr(const char* s)
{
    return qApp->translate( "khtml::Loader", s, 0 );
}

QString khtml::Loader::tr(const char* s, const char * c)
{
    return qApp->translate( "khtml::Loader", s, c );
}

#endif // QT_NO_TRANSLATION

QMetaObject* khtml::Loader::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    (void) QObject::staticMetaObject();
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    typedef void (khtml::Loader::*m1_t0)(KIO::Job*);
    typedef void (QObject::*om1_t0)(KIO::Job*);
    typedef void (khtml::Loader::*m1_t1)(KIO::Job*,const QByteArray&);
    typedef void (QObject::*om1_t1)(KIO::Job*,const QByteArray&);
    m1_t0 v1_0 = &khtml::Loader::slotFinished;
    om1_t0 ov1_0 = (om1_t0)v1_0;
    m1_t1 v1_1 = &khtml::Loader::slotData;
    om1_t1 ov1_1 = (om1_t1)v1_1;
    QMetaData *slot_tbl = QMetaObject::new_metadata(2);
    QMetaData::Access *slot_tbl_access = QMetaObject::new_metaaccess(2);
    slot_tbl[0].name = "slotFinished(KIO::Job*)";
    slot_tbl[0].ptr = (QMember)ov1_0;
    slot_tbl_access[0] = QMetaData::Protected;
    slot_tbl[1].name = "slotData(KIO::Job*,const QByteArray&)";
    slot_tbl[1].ptr = (QMember)ov1_1;
    slot_tbl_access[1] = QMetaData::Protected;
    typedef void (khtml::Loader::*m2_t0)(const DOM::DOMString&,khtml::CachedObject*);
    typedef void (QObject::*om2_t0)(const DOM::DOMString&,khtml::CachedObject*);
    typedef void (khtml::Loader::*m2_t1)(const DOM::DOMString&,khtml::CachedObject*);
    typedef void (QObject::*om2_t1)(const DOM::DOMString&,khtml::CachedObject*);
    m2_t0 v2_0 = &khtml::Loader::requestDone;
    om2_t0 ov2_0 = (om2_t0)v2_0;
    m2_t1 v2_1 = &khtml::Loader::requestFailed;
    om2_t1 ov2_1 = (om2_t1)v2_1;
    QMetaData *signal_tbl = QMetaObject::new_metadata(2);
    signal_tbl[0].name = "requestDone(const DOM::DOMString&,khtml::CachedObject*)";
    signal_tbl[0].ptr = (QMember)ov2_0;
    signal_tbl[1].name = "requestFailed(const DOM::DOMString&,khtml::CachedObject*)";
    signal_tbl[1].ptr = (QMember)ov2_1;
    metaObj = QMetaObject::new_metaobject(
	"khtml::Loader", "QObject",
	slot_tbl, 2,
	signal_tbl, 2,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    metaObj->set_slot_access( slot_tbl_access );
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    return metaObj;
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL requestDone
void khtml::Loader::requestDone( const DOM::DOMString& t0, khtml::CachedObject* t1 )
{
    // No builtin function for signal parameter type const DOM::DOMString&,khtml::CachedObject*
    QConnectionList *clist = receivers("requestDone(const DOM::DOMString&,khtml::CachedObject*)");
    if ( !clist || signalsBlocked() )
	return;
    typedef void (QObject::*RT0)();
    typedef void (QObject::*RT1)(const DOM::DOMString&);
    typedef void (QObject::*RT2)(const DOM::DOMString&,khtml::CachedObject*);
    RT0 r0;
    RT1 r1;
    RT2 r2;
    QConnectionListIt it(*clist);
    QConnection   *c;
    QSenderObject *object;
    while ( (c=it.current()) ) {
	++it;
	object = (QSenderObject*)c->object();
	object->setSender( this );
	switch ( c->numArgs() ) {
	    case 0:
#ifdef Q_FP_CCAST_BROKEN
		r0 = reinterpret_cast<RT0>(*(c->member()));
#else
		r0 = (RT0)*(c->member());
#endif
		(object->*r0)();
		break;
	    case 1:
#ifdef Q_FP_CCAST_BROKEN
		r1 = reinterpret_cast<RT1>(*(c->member()));
#else
		r1 = (RT1)*(c->member());
#endif
		(object->*r1)(t0);
		break;
	    case 2:
#ifdef Q_FP_CCAST_BROKEN
		r2 = reinterpret_cast<RT2>(*(c->member()));
#else
		r2 = (RT2)*(c->member());
#endif
		(object->*r2)(t0, t1);
		break;
	}
    }
}

// SIGNAL requestFailed
void khtml::Loader::requestFailed( const DOM::DOMString& t0, khtml::CachedObject* t1 )
{
    // No builtin function for signal parameter type const DOM::DOMString&,khtml::CachedObject*
    QConnectionList *clist = receivers("requestFailed(const DOM::DOMString&,khtml::CachedObject*)");
    if ( !clist || signalsBlocked() )
	return;
    typedef void (QObject::*RT0)();
    typedef void (QObject::*RT1)(const DOM::DOMString&);
    typedef void (QObject::*RT2)(const DOM::DOMString&,khtml::CachedObject*);
    RT0 r0;
    RT1 r1;
    RT2 r2;
    QConnectionListIt it(*clist);
    QConnection   *c;
    QSenderObject *object;
    while ( (c=it.current()) ) {
	++it;
	object = (QSenderObject*)c->object();
	object->setSender( this );
	switch ( c->numArgs() ) {
	    case 0:
#ifdef Q_FP_CCAST_BROKEN
		r0 = reinterpret_cast<RT0>(*(c->member()));
#else
		r0 = (RT0)*(c->member());
#endif
		(object->*r0)();
		break;
	    case 1:
#ifdef Q_FP_CCAST_BROKEN
		r1 = reinterpret_cast<RT1>(*(c->member()));
#else
		r1 = (RT1)*(c->member());
#endif
		(object->*r1)(t0);
		break;
	    case 2:
#ifdef Q_FP_CCAST_BROKEN
		r2 = reinterpret_cast<RT2>(*(c->member()));
#else
		r2 = (RT2)*(c->member());
#endif
		(object->*r2)(t0, t1);
		break;
	}
    }
}
