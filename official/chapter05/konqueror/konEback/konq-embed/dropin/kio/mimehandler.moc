/****************************************************************************
** KIO::DataFilter meta object code from reading C++ file 'mimehandler.h'
**
** Created: Thu Nov 20 06:14:12 2008
**      by: The Qt MOC ($Id: qt/src/moc/moc.y   2.3.10   edited 2005-01-24 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#if !defined(Q_MOC_OUTPUT_REVISION)
#define Q_MOC_OUTPUT_REVISION 9
#elif Q_MOC_OUTPUT_REVISION != 9
#error "Moc format conflict - please regenerate all moc files"
#endif

#include "mimehandler.h"
#include <qmetaobject.h>
#include <qapplication.h>
#ifdef QWS
#include <qobjectdict.h>
#endif



const char *KIO::DataFilter::className() const
{
    return "KIO::DataFilter";
}

QMetaObject *KIO::DataFilter::metaObj = 0;

#ifdef QWS
static class KIO__DataFilter_metaObj_Unloader {
public:
    ~KIO__DataFilter_metaObj_Unloader()
    {
         if ( objectDict )
             objectDict->remove( "KIO::DataFilter" );
    }
} KIO__DataFilter_metaObj_unloader;
#endif

void KIO::DataFilter::initMetaObject()
{
    if ( metaObj )
	return;
    if ( qstrcmp(QObject::className(), "QObject") != 0 )
	badSuperclassWarning("KIO::DataFilter","QObject");
    (void) staticMetaObject();
}

#ifndef QT_NO_TRANSLATION

QString KIO::DataFilter::tr(const char* s)
{
    return qApp->translate( "KIO::DataFilter", s, 0 );
}

QString KIO::DataFilter::tr(const char* s, const char * c)
{
    return qApp->translate( "KIO::DataFilter", s, c );
}

#endif // QT_NO_TRANSLATION

QMetaObject* KIO::DataFilter::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    (void) QObject::staticMetaObject();
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    typedef void (KIO::DataFilter::*m1_t0)(const QByteArray&);
    typedef void (QObject::*om1_t0)(const QByteArray&);
    m1_t0 v1_0 = &KIO::DataFilter::dataInput;
    om1_t0 ov1_0 = (om1_t0)v1_0;
    QMetaData *slot_tbl = QMetaObject::new_metadata(1);
    QMetaData::Access *slot_tbl_access = QMetaObject::new_metaaccess(1);
    slot_tbl[0].name = "dataInput(const QByteArray&)";
    slot_tbl[0].ptr = (QMember)ov1_0;
    slot_tbl_access[0] = QMetaData::Public;
    typedef void (KIO::DataFilter::*m2_t0)(const QByteArray&);
    typedef void (QObject::*om2_t0)(const QByteArray&);
    m2_t0 v2_0 = &KIO::DataFilter::dataOutput;
    om2_t0 ov2_0 = (om2_t0)v2_0;
    QMetaData *signal_tbl = QMetaObject::new_metadata(1);
    signal_tbl[0].name = "dataOutput(const QByteArray&)";
    signal_tbl[0].ptr = (QMember)ov2_0;
    metaObj = QMetaObject::new_metaobject(
	"KIO::DataFilter", "QObject",
	slot_tbl, 1,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    metaObj->set_slot_access( slot_tbl_access );
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    return metaObj;
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL dataOutput
void KIO::DataFilter::dataOutput( const QByteArray& t0 )
{
    // No builtin function for signal parameter type const QByteArray&
    QConnectionList *clist = receivers("dataOutput(const QByteArray&)");
    if ( !clist || signalsBlocked() )
	return;
    typedef void (QObject::*RT0)();
    typedef void (QObject::*RT1)(const QByteArray&);
    RT0 r0;
    RT1 r1;
    QConnectionListIt it(*clist);
    QConnection   *c;
    QSenderObject *object;
    while ( (c=it.current()) ) {
	++it;
	object = (QSenderObject*)c->object();
	object->setSender( this );
	switch ( c->numArgs() ) {
	    case 0:
#ifdef Q_FP_CCAST_BROKEN
		r0 = reinterpret_cast<RT0>(*(c->member()));
#else
		r0 = (RT0)*(c->member());
#endif
		(object->*r0)();
		break;
	    case 1:
#ifdef Q_FP_CCAST_BROKEN
		r1 = reinterpret_cast<RT1>(*(c->member()));
#else
		r1 = (RT1)*(c->member());
#endif
		(object->*r1)(t0);
		break;
	}
    }
}


const char *KIO::ExternalFilter::className() const
{
    return "KIO::ExternalFilter";
}

QMetaObject *KIO::ExternalFilter::metaObj = 0;

#ifdef QWS
static class KIO__ExternalFilter_metaObj_Unloader {
public:
    ~KIO__ExternalFilter_metaObj_Unloader()
    {
         if ( objectDict )
             objectDict->remove( "KIO::ExternalFilter" );
    }
} KIO__ExternalFilter_metaObj_unloader;
#endif

void KIO::ExternalFilter::initMetaObject()
{
    if ( metaObj )
	return;
    if ( qstrcmp(DataFilter::className(), "KIO::DataFilter") != 0 )
	badSuperclassWarning("KIO::ExternalFilter","KIO::DataFilter");
    (void) staticMetaObject();
}

#ifndef QT_NO_TRANSLATION

QString KIO::ExternalFilter::tr(const char* s)
{
    return qApp->translate( "KIO::ExternalFilter", s, 0 );
}

QString KIO::ExternalFilter::tr(const char* s, const char * c)
{
    return qApp->translate( "KIO::ExternalFilter", s, c );
}

#endif // QT_NO_TRANSLATION

QMetaObject* KIO::ExternalFilter::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    (void) DataFilter::staticMetaObject();
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    typedef void (KIO::ExternalFilter::*m1_t0)(const QByteArray&);
    typedef void (QObject::*om1_t0)(const QByteArray&);
    m1_t0 v1_0 = &KIO::ExternalFilter::dataInput;
    om1_t0 ov1_0 = (om1_t0)v1_0;
    QMetaData *slot_tbl = QMetaObject::new_metadata(1);
    QMetaData::Access *slot_tbl_access = QMetaObject::new_metaaccess(1);
    slot_tbl[0].name = "dataInput(const QByteArray&)";
    slot_tbl[0].ptr = (QMember)ov1_0;
    slot_tbl_access[0] = QMetaData::Public;
    typedef void (KIO::ExternalFilter::*m2_t0)(const QByteArray&);
    typedef void (QObject::*om2_t0)(const QByteArray&);
    m2_t0 v2_0 = &KIO::ExternalFilter::dataOutput;
    om2_t0 ov2_0 = (om2_t0)v2_0;
    QMetaData *signal_tbl = QMetaObject::new_metadata(1);
    signal_tbl[0].name = "dataOutput(const QByteArray&)";
    signal_tbl[0].ptr = (QMember)ov2_0;
    metaObj = QMetaObject::new_metaobject(
	"KIO::ExternalFilter", "KIO::DataFilter",
	slot_tbl, 1,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    metaObj->set_slot_access( slot_tbl_access );
#ifndef QT_NO_PROPERTIES
#endif // QT_NO_PROPERTIES
    return metaObj;
}

// SIGNAL dataOutput
void KIO::ExternalFilter::dataOutput( const QByteArray& t0 )
{
    // No builtin function for signal parameter type const QByteArray&
    QConnectionList *clist = receivers("dataOutput(const QByteArray&)");
    if ( !clist || signalsBlocked() )
	return;
    typedef void (QObject::*RT0)();
    typedef void (QObject::*RT1)(const QByteArray&);
    RT0 r0;
    RT1 r1;
    QConnectionListIt it(*clist);
    QConnection   *c;
    QSenderObject *object;
    while ( (c=it.current()) ) {
	++it;
	object = (QSenderObject*)c->object();
	object->setSender( this );
	switch ( c->numArgs() ) {
	    case 0:
#ifdef Q_FP_CCAST_BROKEN
		r0 = reinterpret_cast<RT0>(*(c->member()));
#else
		r0 = (RT0)*(c->member());
#endif
		(object->*r0)();
		break;
	    case 1:
#ifdef Q_FP_CCAST_BROKEN
		r1 = reinterpret_cast<RT1>(*(c->member()));
#else
		r1 = (RT1)*(c->member());
#endif
		(object->*r1)(t0);
		break;
	}
    }
}
